/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.model.ApiClient;
import io.swagger.client.model.ApiException;
import io.swagger.client.model.ApiResponse;
import io.swagger.client.model.Configuration;
import io.swagger.client.model.agreements.*;
import io.swagger.client.model.baseUris.BaseUriInfo;
import io.swagger.client.model.libraryDocuments.LibraryDocumentCreationInfoV6;
import io.swagger.client.model.libraryDocuments.LibraryDocumentCreationResponse;
import io.swagger.client.model.transientDocuments.TransientDocumentResponse;
import org.junit.Before;
import org.junit.Test;
import org.junit.Ignore;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.stream.Collectors;

/**
 * API tests for AgreementsApi
 */
@Ignore
public class AgreementsApiTest {

    private final AgreementsApi api = new AgreementsApi();

    public final static String baseUrl = "https://api.na4.adobesign.com:443/";
    public final static String endpointUrl = "api/rest/v6";

    String mimeType = "application/pdf";

    public String elag(ApiResponse<?> apiResponse) {
        Map<String, List<String>> headers = apiResponse.getHeaders();
        List<String> strings = headers.get("ETag");
        return strings.get(0);
    }

    @Before
    public void init() throws ApiException {
        ApiClient apiClient = new ApiClient();
        apiClient.setBasePath(baseUrl + endpointUrl);
        Configuration.setDefaultApiClient(apiClient);
//        BaseUrisApi baseUrisApi = new BaseUrisApi();
//        BaseUriInfo baseUriInfo = baseUrisApi.getBaseUris(authorization());
//        apiClient.setBasePath(baseUriInfo.getApiAccessPoint() + endpointUrl);
        api.setApiClient(apiClient);
    }

    public String authorization() {
        return "Bearer 3AAABLblqZhATbP6UCE7nhcSbYFrMr3qDIgOPWn1JVzyOhCurpwFrN3PkfjKbqdYNBA0GI7-PH1IvOAxbCZOeO2JurGJkBV_e";
    }


    @Test
    public void qysTest() throws Exception{
        // 创建合同
        AgreementCreationInfo creationInfo = new AgreementCreationInfo();

        // 指定签署方
        addSigner(creationInfo);

        // 上传签署文件
        addFile(creationInfo);

        // 指定签署位置
//        addRect(creationInfo);

        // 创建协议
        String id = createAgreement(creationInfo);

        // 发起草稿
        updateAgreementStata(id);

        // 添加签署位置
//        putFormField(id);

        // 查看签署位置
        getFormFields(id);

        // 发起草稿
//        updateAgreementStata(id);


    }

    private void getFormFields(String id) throws ApiException {
        AgreementFormFields formFields = api.getFormFields(authorization(), id, null, null, null, null);
        System.out.println(formFields);
    }

    private void putFormField(String id) throws Exception{
        // 获取签署位置
        // aodbe 反应不过来
        Thread.sleep(3000);


        ApiResponse<AgreementFormFields> formFieldsWithHttpInfo = api.getFormFieldsWithHttpInfo(authorization(), id, null, null, null, null);

        String elag = elag(formFieldsWithHttpInfo);

        System.out.println(formFieldsWithHttpInfo.getData());

        // 获取 成员信息
        MembersInfo allMembers = api.getAllMembers(authorization(), id, null, null, null, null);

        Map<String, String> parSetIds = allMembers.getParticipantSets().stream().collect(
                Collectors.toMap(DetailedParticipantSetInfo::getName
                        , DetailedParticipantSetInfo::getId));

        FormFieldPutInfo formFieldPutInfo =new FormFieldPutInfo();
        for (int i = 0; i < 2; i++) {
            String name = String.valueOf(i + 1);
            String memberName = "tag"+name;
            FormField formField = new FormField();
            formField.setAlignment(FormField.AlignmentEnum.CENTER);
            formField.setContentType(FormField.ContentTypeEnum.SIGNATURE_BLOCK);
            formField.setInputType(FormField.InputTypeEnum.SIGNATURE);
            formField.setFontSize(10D);
            formField.setName(name);
            formField.assignee(parSetIds.get(memberName));
            formField.required(true);
            formField.setMaxLength(80);
            formField.setOrigin(FormField.OriginEnum.GENERATED);

            FormFieldLocation formFieldLocation = new FormFieldLocation();
            formFieldLocation.setHeight(80D);
            formFieldLocation.setWidth(40D);
            formFieldLocation.setTop(200d);
            formFieldLocation.setLeft(200d);
            formFieldLocation.setPageNumber(i + 1);

            formField.addLocationsItem(formFieldLocation);

            formFieldPutInfo.addFieldsItem(formField);
        }
        api.updateFormFields(authorization(), elag, id, formFieldPutInfo, null, null);

    }

    private void updateAgreementStata(String id) throws ApiException {
        // 获取 Etag
        ApiResponse<AgreementInfo> httpInfo = api.getAgreementInfoWithHttpInfo(authorization(), id, null, null, null);
        String elag = elag(httpInfo);

        AgreementInfo.StatusEnum status = httpInfo.getData().getStatus();

        AgreementStateInfo stateInfo = new AgreementStateInfo();
//        if (state == AgreementInfo.StateEnum.AUTHORING){
//            stateInfo.setState(AgreementStateInfo.StateEnum.IN_PROCESS);
//        } else {
//        }
        stateInfo.setState(AgreementStateInfo.StateEnum.AUTHORING);

        api.updateAgreementState(authorization(), elag, id, stateInfo, null ,null);


    }

    private String createAgreement(AgreementCreationInfo agreementInfo) throws ApiException {


        String contractId = UUID.randomUUID().toString();
        agreementInfo.setName("qiyuesuo test adobe");
        agreementInfo.setSignatureType(AgreementCreationInfo.SignatureTypeEnum.ESIGN);
        agreementInfo.setState(AgreementCreationInfo.StateEnum.DRAFT);
        agreementInfo.createdDate(new Date());
        agreementInfo.setExternalId(new ExternalId().id(contractId));
        agreementInfo.setId(contractId);
        agreementInfo.emailOption(
                new EmailOption().sendOptions(
                        new SendOptions().initEmails(
                                SendOptions.InitEmailsEnum.NONE)));
        AgreementCreationResponse agreementCreationResponse = api
                .createAgreement(authorization(), agreementInfo, null, null);
        String id = agreementCreationResponse.getId();
        System.out.println(id);
        return id;
    }

    private void addRect(AgreementCreationInfo creationInfo) {

        FormFieldGenerator formFieldGenerator = new FormFieldGenerator();

        FormFieldPutInfo formFieldPutInfo = new FormFieldPutInfo();

        for (int i = 0; i < 2; i++) {
            String name = String.valueOf(i + 1);
            FormField formField = new FormField();
            formField.setAlignment(FormField.AlignmentEnum.CENTER);
//                formField.setContentType(FormField.ContentTypeEnum.SIGNATURE);
            formField.setName(name);
            formField.assignee("tag"+name);

            FormFieldLocation formFieldLocation = new FormFieldLocation();
            formFieldLocation.setHeight(800D);
            formFieldLocation.setWidth(200D);
            formFieldLocation.setTop(1d);
            formFieldLocation.setLeft(1d);
            formFieldLocation.setPageNumber(i + 1);

            formField.addLocationsItem(formFieldLocation);

            formFieldGenerator.addFormFieldDescription(formField);
        }


        creationInfo.setFormFieldGenerator(formFieldGenerator);

    }

    private void addFile(AgreementCreationInfo creationInfo) throws ApiException {
        TransientDocumentsApi transientDocumentsApi = new TransientDocumentsApi();

        File file = new File("F:\\word\\qiyuesuo\\空白.pdf");

        TransientDocumentResponse transientDocument = transientDocumentsApi.createTransientDocument(authorization(), file,
                null, null, "", mimeType);

        String transientDocumentId = transientDocument.getTransientDocumentId();

        LibraryDocumentsApi libraryDocumentsApi = new LibraryDocumentsApi();

        LibraryDocumentCreationInfoV6 libraryDocumentCreationInfoV6 = new LibraryDocumentCreationInfoV6();

        io.swagger.client.model.libraryDocuments.FileInfo fileInfo = new io.swagger.client.model.libraryDocuments.FileInfo();

        fileInfo.setTransientDocumentId(transientDocumentId);

        libraryDocumentCreationInfoV6.addFileInfosItem(fileInfo);
        libraryDocumentCreationInfoV6.setName("qys");
        libraryDocumentCreationInfoV6.addTemplateTypesItem(LibraryDocumentCreationInfoV6.TemplateTypesEnum.DOCUMENT);
        libraryDocumentCreationInfoV6.setState(LibraryDocumentCreationInfoV6.StateEnum.ACTIVE);
        libraryDocumentCreationInfoV6.setSharingMode(LibraryDocumentCreationInfoV6.SharingModeEnum.USER);

        LibraryDocumentCreationResponse libraryDocument = libraryDocumentsApi.createLibraryDocument(authorization(), libraryDocumentCreationInfoV6, null, null);

        System.out.println("libraryDocument:" + libraryDocument.getId());

        // 添加签署位置
        addlibraryDocumentFormField();

        FileInfo fileInfo1 = new FileInfo();

        fileInfo1.setLibraryDocumentId(libraryDocument.getId());

        creationInfo.addFileInfosItem(fileInfo1);
    }

    private void addSigner(AgreementCreationInfo creationInfo){

        List<String> email = new ArrayList<>();
        email.add("1");
        email.add("1277518148@qq.com");
        email.add("1735873875@qq.com");

        for (int i = 1; i <= 2; i++) {
            ParticipantSetInfo participantSetInfo = new ParticipantSetInfo();
            ParticipantSetMemberInfo participantSetMemberInfo = new ParticipantSetMemberInfo();
            participantSetMemberInfo.setEmail(email.get(i));
            participantSetInfo.setName("tag"+String.valueOf(i));
            participantSetInfo.setLabel("label"+String.valueOf(i));
            participantSetInfo.addMemberInfosItem(participantSetMemberInfo);
            participantSetInfo.setOrder(i);
            participantSetInfo.setRole(ParticipantSetInfo.RoleEnum.SIGNER);
            creationInfo.addParticipantSetsInfoItem(participantSetInfo);
        }
    }

    
    /**
     * Adds template fields to an agreement
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTemplateFieldsToAgreementTest() throws ApiException {
        String authorization = "3AAABLblqZhATbP6UCE7nhcSbYFrMr3qDIgOPWn1JVzyOhCurpwFrN3PkfjKbqdYNBA0GI7-PH1IvOAxbCZOeO2JurGJkBV_e";
        String ifMatch = null;
        String agreementId = null;
        FormFieldPostInfo formFieldPostInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;

        ApiClient apiClient = new ApiClient();

//        //Default baseUrl to make GET /baseUris API call.
//        String baseUrl = "https://api.echosign.com/";
//        String endpointUrl = "/api/rest/v6";
//        apiClient.setBasePath(baseUrl + endpointUrl);
//
//        //TODO : Provide an OAuth Access Token as "Bearer : access token" in authorization
//        String authorization = "authorization_example";
//
//        //Get the baseUris for the user and set it in apiClient.
//        BaseUrisApi baseUrisApi = new BaseUrisApi(apiClient);
//        BaseUriInfo baseUriInfo = baseUrisApi.getBaseUris(authorization);
//        apiClient.setBasePath(baseUriInfo.getApiAccessPoint() + endpointUrl);
//        api.setApiClient(apiClient);

        AgreementFormFields response = api.addTemplateFieldsToAgreement(authorization, ifMatch, agreementId, formFieldPostInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Creates an agreement. Sends it out for signatures, and returns the agreementID in the response to the client.
     *
     * This is a primary endpoint which is used to create a new agreement. An agreement can be created using transientDocument, libraryDocument or a URL. You can create an agreement in one of the 3 mentioned states: a) &lt;b&gt;DRAFT&lt;/b&gt; - to incrementally build the agreement before sending out, b) &lt;b&gt;AUTHORING&lt;/b&gt; - to add/edit form fields in the agreement, c) &lt;b&gt;IN_PROCESS&lt;/b&gt; - to immediately send the agreement. You can use the PUT /agreements/{agreementId}/state endpoint to transition an agreement between the above mentioned states. An allowed transition would follow the following sequence: DRAFT -&gt; AUTHORING -&gt; IN_PROCESS -&gt; CANCELLED.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAgreementTest() throws ApiException {
        String authorization = "3AAABLblqZhATbP6UCE7nhcSbYFrMr3qDIgOPWn1JVzyOhCurpwFrN3PkfjKbqdYNBA0GI7-PH1IvOAxbCZOeO2JurGJkBV_e";
        AgreementCreationInfo agreementInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        AgreementCreationResponse response = api.createAgreement(authorization, agreementInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves the latest state view url of agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAgreementViewTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        AgreementViewInfo agreementViewInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        AgreementViews response = api.createAgreementView(authorization, agreementId, agreementViewInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Creates a participantSet to which the agreement is forwarded for taking appropriate action.
     *
     * Participants marked as delegator can call this API endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDelegatedParticipantSetsTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String participantSetId = null;
        DelegatedParticipantSetInfo delegatedParticipantSetInfo = null;
        String xApiUser = null;
        DelegationResponse response = api.createDelegatedParticipantSets(authorization, agreementId, participantSetId, delegatedParticipantSetInfo, xApiUser);

        // TODO: test validations
    }
    
    /**
     * Creates a reminder on the specified participants of an agreement identified by agreementId in the path.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createReminderOnParticipantTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        ReminderInfo reminderInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        ReminderCreationResult response = api.createReminderOnParticipant(authorization, agreementId, reminderInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Share an agreement with someone.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShareOnAgreementTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        ShareCreationInfoList shareCreationInfoList = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        ShareCreationResponseList response = api.createShareOnAgreement(authorization, agreementId, shareCreationInfoList, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Deletes all the documents of an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentsTest() throws ApiException {
        String authorization = null;
        String ifMatch = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.deleteDocuments(authorization, ifMatch, agreementId, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves the current status of an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgreementInfoTest() throws ApiException {
        String authorization = authorization();
        String agreementId = "CBJCHBCAABAA28fNen6SIGnysnm2IV_SpO18n_7rGOZE";
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        AgreementInfo response = api.getAgreementInfo(authorization, agreementId, xApiUser, xOnBehalfOfUser, ifNoneMatch);
        ApiResponse<AgreementInfo> agreementInfoWithHttpInfo = api.getAgreementInfoWithHttpInfo(authorization, agreementId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        Map<String, List<String>> headers = agreementInfoWithHttpInfo.getHeaders();
        System.out.println(response);
        // TODO: test validations
    }
    
    /**
     * Retrieves the latest note associated with an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgreementNoteForApiUserTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        Note response = api.getAgreementNoteForApiUser(authorization, agreementId, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves a specific reminder associated with an agreement
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgreementReminderTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String reminderId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        ReminderInfo response = api.getAgreementReminder(authorization, agreementId, reminderId, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves the reminders of an agreement, identified by agreementId in the path.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgreementRemindersTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String status = null;
        RemindersResponse response = api.getAgreementReminders(authorization, agreementId, xApiUser, xOnBehalfOfUser, status);

        // TODO: test validations
    }
    
    /**
     * Retrieves the security options for a particular participant.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgreementSecurityOptionsForParticipationTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String participantSetId = null;
        String participantId = null;
        String ifNoneMatch = null;
        String xApiUser = null;
        ParticipantSecurityOption response = api.getAgreementSecurityOptionsForParticipation(authorization, agreementId, participantSetId, participantId, ifNoneMatch, xApiUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves agreements for the user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgreementsTest() throws ApiException {
        String authorization = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String externalId = null;
        Boolean showHiddenAgreements = null;
        String cursor = null;
        Integer pageSize = null;
        UserAgreements response = api.getAgreements(authorization, xApiUser, xOnBehalfOfUser, externalId, showHiddenAgreements, cursor, pageSize);

        // TODO: test validations
    }
    
    /**
     * Retrieves the IDs of the documents of an agreement identified by agreementId.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllDocumentsTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        String versionId = null;
        String participantId = null;
        String supportingDocumentContentFormat = null;
        AgreementDocuments response = api.getAllDocuments(authorization, agreementId, xApiUser, xOnBehalfOfUser, ifNoneMatch, versionId, participantId, supportingDocumentContentFormat);

        // TODO: test validations
    }
    
    /**
     * Retrieves image urls of all visible pages of all the documents associated with an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllDocumentsImageUrlsTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String versionId = null;
        String participantId = null;
        String imageSizes = null;
        Boolean includeSupportingDocumentsImageUrls = null;
        Boolean showImageAvailabilityOnly = null;
        DocumentsImageUrlsInfo response = api.getAllDocumentsImageUrls(authorization, agreementId, xApiUser, xOnBehalfOfUser, versionId, participantId, imageSizes, includeSupportingDocumentsImageUrls, showImageAvailabilityOnly);

        // TODO: test validations
    }
    
    /**
     * Retrieves information of members of the agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllMembersTest() throws ApiException {
        String authorization = authorization();
        String agreementId = "CBJCHBCAABAAtQ0uYsCXMcoHHbrgQo-Y_jZqFDpPaUA0";
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        Boolean includeNextParticipantSet = null;
        MembersInfo response = api.getAllMembers(authorization, agreementId, xApiUser, xOnBehalfOfUser, ifNoneMatch, includeNextParticipantSet);

        System.out.println(response);
        // TODO: test validations
    }
    
    /**
     * Retrieves the audit trail of an agreement identified by agreementId.
     *
     * PDF file stream containing audit trail information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuditTrailTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        byte[] response = api.getAuditTrail(authorization, agreementId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves a single combined PDF document for the documents associated with an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCombinedDocumentTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        String versionId = null;
        String participantId = null;
        Boolean attachSupportingDocuments = null;
        Boolean attachAuditReport = null;
        byte[] response = api.getCombinedDocument(authorization, agreementId, xApiUser, xOnBehalfOfUser, ifNoneMatch, versionId, participantId, attachSupportingDocuments, attachAuditReport);

        // TODO: test validations
    }
    
    /**
     * Retrieves info of all pages of a combined PDF document for the documents associated with an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCombinedDocumentPagesInfoTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        Boolean includeSupportingDocumentsPagesInfo = null;
        CombinedDocumentPagesInfo response = api.getCombinedDocumentPagesInfo(authorization, agreementId, xApiUser, xOnBehalfOfUser, ifNoneMatch, includeSupportingDocumentsPagesInfo);

        // TODO: test validations
    }
    
    /**
     * Retrieves url of all visible pages of all the documents associated with an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCombinedDocumentUrlTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String versionId = null;
        String participantId = null;
        Boolean attachSupportingDocuments = null;
        Boolean attachAuditReport = null;
        DocumentUrl response = api.getCombinedDocumentUrl(authorization, agreementId, xApiUser, xOnBehalfOfUser, versionId, participantId, attachSupportingDocuments, attachAuditReport);

        // TODO: test validations
    }
    
    /**
     * Retrieves the file stream of a document of an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String documentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        byte[] response = api.getDocument(authorization, agreementId, documentId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves image urls of all visible pages of a document associated with an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentImageUrlsTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String documentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String imageSizes = null;
        Boolean showImageAvailabilityOnly = null;
        Integer startPage = null;
        Integer endPage = null;
        AgreementDocumentImageUrlsInfo response = api.getDocumentImageUrls(authorization, agreementId, documentId, xApiUser, xOnBehalfOfUser, imageSizes, showImageAvailabilityOnly, startPage, endPage);

        // TODO: test validations
    }
    
    /**
     * Retrieves the events information for an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventsTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        AgreementEventList response = api.getEvents(authorization, agreementId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves data entered into the interactive form fields of the agreement.
     *
     * This API can only be called by the creator of the agreement
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormDataTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        byte[] response = api.getFormData(authorization, agreementId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves details of form fields of an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormFieldsTest() throws ApiException {
        String authorization = authorization();
        String agreementId = "CBJCHBCAABAADKTIyVmmbaMS3COwbThsfmdpWm-rVb6h";
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        String participantEmail = null;
        ApiResponse<AgreementFormFields> formFieldsWithHttpInfo = api.getFormFieldsWithHttpInfo(authorization, agreementId, xApiUser, xOnBehalfOfUser, ifNoneMatch, participantEmail);

        // TODO: test validations
        Map<String, List<String>> headers = formFieldsWithHttpInfo.getHeaders();
        System.out.println(formFieldsWithHttpInfo.getData());
        System.out.println(headers);
    }
    
    /**
     * Retrieves the merge info stored with an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMergeInfoTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        FormFieldMergeInfo response = api.getMergeInfo(authorization, agreementId, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves the participant set of an agreement identified by agreementId in the path.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParticipantSetTest() throws ApiException {
        String authorization = authorization();
        String agreementId = "CBJCHBCAABAAQZ5tpscTFzwsNZDrS6Darwrno1C6Hrhz";
        String participantSetId = "1";
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        DetailedParticipantSetInfo response = api.getParticipantSet(authorization, agreementId, participantSetId, xApiUser, xOnBehalfOfUser, ifNoneMatch);
        System.out.println(response);
        // TODO: test validations
    }
    
    /**
     * Retrieves the URL for the e-sign page for the current signer(s) of an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSigningUrlTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String ifNoneMatch = null;
        SigningUrlResponse response = api.getSigningUrl(authorization, agreementId, xApiUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Rejects the agreement for a participant.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rejectAgreementForParticipationTest() throws ApiException {
        String authorization = null;
        String ifMatch = null;
        String agreementId = null;
        String participantSetId = null;
        String participantId = null;
        AgreementRejectionInfo agreementRejectionInfo = null;
        String xApiUser = null;
        api.rejectAgreementForParticipation(authorization, ifMatch, agreementId, participantSetId, participantId, agreementRejectionInfo, xApiUser);

        // TODO: test validations
    }
    
    /**
     * Updates the agreement in draft state, or update the expirationTime on an existing agreement that is already out for signature.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAgreementTest() throws ApiException {
        String authorization = null;
        String ifMatch = null;
        String agreementId = null;
        AgreementInfo agreementInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateAgreement(authorization, ifMatch, agreementId, agreementInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Set the merge info for an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAgreementMergeInfoTest() throws ApiException {
        String authorization = null;
        String ifMatch = null;
        String agreementId = null;
        FormFieldMergeInfo formFieldMergeInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateAgreementMergeInfo(authorization, ifMatch, agreementId, formFieldMergeInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Updates the latest note associated with an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAgreementNoteForApiUserTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        Note note = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateAgreementNoteForApiUser(authorization, agreementId, note, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Updates an existing reminder for an agreement
     *
     * You can only update an ACTIVE reminder, and can only update the status to &#39;CANCELED&#39;, update reminderParticipantIds, or update note.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAgreementReminderTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String reminderId = null;
        ReminderInfo reminderInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateAgreementReminder(authorization, agreementId, reminderId, reminderInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Updates the security options for a particular participant.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAgreementSecurityOptionsForParticipationTest() throws ApiException {
        String authorization = null;
        String ifMatch = null;
        String agreementId = null;
        String participantSetId = null;
        String participantId = null;
        ParticipantSecurityOption participantSecurityOption = null;
        String xApiUser = null;
        api.updateAgreementSecurityOptionsForParticipation(authorization, ifMatch, agreementId, participantSetId, participantId, participantSecurityOption, xApiUser);

        // TODO: test validations
    }
    
    /**
     * Updates the state of an agreement identified by agreementId in the path.
     *
     * This endpoint can be used by originator/sender of an agreement to transition between the states of agreement. An allowed transition would follow the following sequence: DRAFT -&gt; AUTHORING -&gt; IN_PROCESS -&gt; CANCELLED.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAgreementStateTest() throws ApiException {
        String authorization = authorization();
        String ifMatch = "E3A5DBECAB51C7D8C6FF51EE5AD5CFF5.5334C3A18AB5A054FF3DBC33AFBDF6C";
        String agreementId = "CBJCHBCAABAA28fNen6SIGnysnm2IV_SpO18n_7rGOZE";
        AgreementStateInfo agreementStateInfo = new AgreementStateInfo();
        agreementStateInfo.setState(AgreementStateInfo.StateEnum.AUTHORING);
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateAgreementState(authorization, ifMatch, agreementId, agreementStateInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Updates the visibility of an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAgreementVisibilityTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        VisibilityInfo visibilityInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateAgreementVisibility(authorization, agreementId, visibilityInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Updates form fields of an agreement.  This will replace all fields in AUTHORING mode agreements, and will replace all fields except for text tag generated fields in DRAFT mode agreements.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFormFieldsTest() throws ApiException {
        String ifMatch = "B518D931382EC9556F32EFED4232DB.5334C3A18AB5A054FF3DBC33AFBDF6C";
        String agreementId = "CBJCHBCAABAA28fNen6SIGnysnm2IV_SpO18n_7rGOZE";
        FormFieldPutInfo formFieldPutInfo = new FormFieldPutInfo();
        String xApiUser = null;
        String xOnBehalfOfUser = null;


        for (int i = 0; i < 2; i++) {
            FormField formField = new FormField();
            formField.setAlignment(FormField.AlignmentEnum.CENTER);
            formField.setName(String.valueOf(i));
            FormFieldLocation formFieldLocation = new FormFieldLocation();
            formFieldLocation.setHeight(100D);
            formFieldLocation.setWidth(100D);
            formFieldLocation.setTop(1d);
            formFieldLocation.setLeft(1d);
            formFieldLocation.setPageNumber(i + 1);
            formField.addLocationsItem(formFieldLocation);

            formFieldPutInfo.addFieldsItem(formField);
        }

        AgreementFormFields response = api.updateFormFields(authorization(), ifMatch, agreementId, formFieldPutInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Updates the participant set of an agreement identified by agreementId in the path.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateParticipantSetTest() throws ApiException {
        String authorization = null;
        String ifMatch = null;
        String agreementId = null;
        String participantSetId = null;
        DetailedParticipantSetInfo detailedParticipantSetInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateParticipantSet(authorization, ifMatch, agreementId, participantSetId, detailedParticipantSetInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }

    
}
