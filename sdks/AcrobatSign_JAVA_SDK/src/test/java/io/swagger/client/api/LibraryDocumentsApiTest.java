/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.model.ApiClient;
import io.swagger.client.model.ApiException;
import io.swagger.client.model.ApiResponse;
import io.swagger.client.model.Configuration;
import io.swagger.client.model.agreements.AgreementFormFields;
import io.swagger.client.model.agreements.FormField;
import io.swagger.client.model.agreements.FormFieldLocation;
import io.swagger.client.model.agreements.FormFieldPutInfo;
import io.swagger.client.model.libraryDocuments.*;
import io.swagger.client.model.transientDocuments.TransientDocumentResponse;
import org.junit.Before;
import org.junit.Test;
import org.junit.Ignore;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LibraryDocumentsApi
 */
@Ignore
public class LibraryDocumentsApiTest {

    private final LibraryDocumentsApi api = new LibraryDocumentsApi();

    String mimeType = "application/pdf";
    public final static String baseUrl = "https://api.na4.adobesign.com:443/";
    public final static String endpointUrl = "api/rest/v6";

    public String authorization() {
        return "Bearer 3AAABLblqZhATbP6UCE7nhcSbYFrMr3qDIgOPWn1JVzyOhCurpwFrN3PkfjKbqdYNBA0GI7-PH1IvOAxbCZOeO2JurGJkBV_e";
    }

    public String elag(ApiResponse<?> apiResponse) {
        Map<String, List<String>> headers = apiResponse.getHeaders();
        List<String> strings = headers.get("ETag");
        return strings.get(0);
    }

    @Before
    public void init() throws ApiException {
        ApiClient apiClient = new ApiClient();
        apiClient.setBasePath(baseUrl + endpointUrl);
        Configuration.setDefaultApiClient(apiClient);
//        BaseUrisApi baseUrisApi = new BaseUrisApi();
//        BaseUriInfo baseUriInfo = baseUrisApi.getBaseUris(authorization());
//        apiClient.setBasePath(baseUriInfo.getApiAccessPoint() + endpointUrl);
        api.setApiClient(apiClient);
    }

    
    /**
     * Creates a template that is placed in the library of the user for reuse.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLibraryDocumentTest() throws ApiException {
        String authorization = null;
        LibraryDocumentCreationInfoV6 libraryDocumentInfo = new LibraryDocumentCreationInfoV6();

        libraryDocumentInfo.setName("xxx");
        libraryDocumentInfo.setSharingMode(LibraryDocumentCreationInfoV6.SharingModeEnum.USER);
        libraryDocumentInfo.setState(LibraryDocumentCreationInfoV6.StateEnum.ACTIVE);
        libraryDocumentInfo.addTemplateTypesItem(LibraryDocumentCreationInfoV6.TemplateTypesEnum.DOCUMENT);

        TransientDocumentsApi transientDocumentsApi = new TransientDocumentsApi();

        File file = new File("F:\\word\\qiyuesuo\\空白.pdf");

        TransientDocumentResponse transientDocument = transientDocumentsApi.createTransientDocument(authorization(), file,
                null, null, "", mimeType);


        FileInfo fileInfo = new FileInfo();
        fileInfo.setTransientDocumentId(transientDocument.getTransientDocumentId());


        libraryDocumentInfo.addFileInfosItem(fileInfo);
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        LibraryDocumentCreationResponse response = api.createLibraryDocument(authorization(), libraryDocumentInfo, xApiUser, xOnBehalfOfUser);

        System.out.println(response);
        // TODO: test validations
    }
    
    /**
     * Retrieves the latest state view url of a library document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLibraryDocumentViewTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        LibraryViewInfo libraryViewInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        LibraryDocumentViewResponse response = api.createLibraryDocumentView(authorization, libraryDocumentId, libraryViewInfo, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves the combined document associated with a library document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCombinedDocumentTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        Boolean attachAuditReport = null;
        byte[] response = api.getCombinedDocument(authorization, libraryDocumentId, xApiUser, xOnBehalfOfUser, ifNoneMatch, attachAuditReport);

        // TODO: test validations
    }
    
    /**
     * Retrieves the IDs of the documents associated with library document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentsTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        String versionId = null;
        Documents response = api.getDocuments(authorization, libraryDocumentId, xApiUser, xOnBehalfOfUser, ifNoneMatch, versionId);

        // TODO: test validations
    }
    
    /**
     * Retrieves the events information for a library document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventsTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        LibraryDocumentEventList response = api.getEvents(authorization, libraryDocumentId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves data entered into the interactive form fields of the library document.
     *
     * This API can only be called by the creator of the library document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormDataTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        byte[] response = api.getFormData(authorization, libraryDocumentId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves the file stream of a document of library document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLibraryDocumentTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        String documentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        byte[] response = api.getLibraryDocument(authorization, libraryDocumentId, documentId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves the audit trail associated with a library document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLibraryDocumentAuditTrailTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        byte[] response = api.getLibraryDocumentAuditTrail(authorization, libraryDocumentId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves image urls of all visible pages of a document associated with a library document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLibraryDocumentImageUrlsTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        String documentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        String imageSizes = null;
        Integer startPage = null;
        Integer endPage = null;
        DocumentImageUrlsInfo response = api.getLibraryDocumentImageUrls(authorization, libraryDocumentId, documentId, xApiUser, xOnBehalfOfUser, ifNoneMatch, imageSizes, startPage, endPage);

        // TODO: test validations
    }
    
    /**
     * Retrieves the details of a library document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLibraryDocumentInfoTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        LibraryDocumentCreationInfoV6 response = api.getLibraryDocumentInfo(authorization, libraryDocumentId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves the latest note of a library document for the API user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLibraryDocumentNoteForApiUserTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        Note response = api.getLibraryDocumentNoteForApiUser(authorization, libraryDocumentId, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves library documents for a user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLibraryDocumentsTest() throws ApiException {
        String authorization = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        Boolean showHiddenLibraryDocuments = null;
        String cursor = null;
        Integer pageSize = null;
        LibraryDocuments response = api.getLibraryDocuments(authorization, xApiUser, xOnBehalfOfUser, showHiddenLibraryDocuments, cursor, pageSize);

        // TODO: test validations
    }
    
    /**
     * Updates the library document.
     *
     * Currently status, name, sharingMode and templateTypes of the library document can only be updated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLibraryDocumentTest() throws ApiException {
        String authorization = null;
        String ifMatch = null;
        String libraryDocumentId = null;
        LibraryDocumentInfo libraryDocumentInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateLibraryDocument(authorization, ifMatch, libraryDocumentId, libraryDocumentInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Updates the latest note of a library document for the API user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLibraryDocumentNoteForApiUserTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        Note note = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateLibraryDocumentNoteForApiUser(authorization, libraryDocumentId, note, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Updates the library document&#39;s state.
     *
     * Currently state can be changed from AUTHORING to ACTIVE.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLibraryDocumentStateTest() throws ApiException {
        String authorization = null;
        String ifMatch = null;
        String libraryDocumentId = null;
        LibraryDocumentStateInfo libraryDocumentStateInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateLibraryDocumentState(authorization, ifMatch, libraryDocumentId, libraryDocumentStateInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Updates the visibility of library document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLibraryDocumentVisibilityTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        VisibilityInfo visibilityInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateLibraryDocumentVisibility(authorization, libraryDocumentId, visibilityInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }

    @Test
    public void updateLibraryFormFieldsTest() throws ApiException {
        String authorization = authorization();
        String ifmatch = "2DAA7354EF4F43B379DFD879B873A8B.5334C3A18AB5A054FF3DBC33AFBDF6C";
        String libraryDocumentId = "CBJCHBCAABAAQvW9x9aJE4Auw0vG5ChbCGzjSMi6zjjI";
        FormFieldPutInfo formFieldPutInfo = new FormFieldPutInfo();
        String xApiUser = null;
        String xOnBehalfOfUser = null;


        ApiResponse<AgreementFormFields> formFieldsWithHttpInfo = api.getFormFieldsWithHttpInfo(authorization, libraryDocumentId, xApiUser, xOnBehalfOfUser, null, null);
        String elag = elag(formFieldsWithHttpInfo);



        for (int i = 1; i <= 2; i++) {
            FormField formField = new FormField();

            formField.setName("i" + i);

            FormFieldLocation formFieldLocation = new FormFieldLocation();
            formFieldLocation.setPageNumber(i);
            formFieldLocation.setLeft(50D * i);
            formFieldLocation.setTop(50D * i);
            formFieldLocation.setWidth(50D * i);
            formFieldLocation.setHeight(50D * i);

            formField.addLocationsItem(formFieldLocation);
            formFieldPutInfo.addFieldsItem(formField);
        }

        AgreementFormFields agreementFormFields = api.updateFormFields(authorization, null, libraryDocumentId, formFieldPutInfo, xApiUser, xOnBehalfOfUser);

        System.out.println(agreementFormFields);
        // TODO: test validations
    }
    
}
